// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: base.proto

#include "base.pb.h"
#include "base.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hello {

static const char* HelloService_method_names[] = {
  "/hello.HelloService/sayHelloAndSleep",
};

std::unique_ptr< HelloService::Stub> HelloService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HelloService::Stub> stub(new HelloService::Stub(channel));
  return stub;
}

HelloService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sayHelloAndSleep_(HelloService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::hello::Name, ::hello::Hello>* HelloService::Stub::sayHelloAndSleepRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::hello::Name, ::hello::Hello>::Create(channel_.get(), rpcmethod_sayHelloAndSleep_, context);
}

void HelloService::Stub::experimental_async::sayHelloAndSleep(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::hello::Name,::hello::Hello>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::hello::Name,::hello::Hello>::Create(stub_->channel_.get(), stub_->rpcmethod_sayHelloAndSleep_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::hello::Name, ::hello::Hello>* HelloService::Stub::AsyncsayHelloAndSleepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::hello::Name, ::hello::Hello>::Create(channel_.get(), cq, rpcmethod_sayHelloAndSleep_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::hello::Name, ::hello::Hello>* HelloService::Stub::PrepareAsyncsayHelloAndSleepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::hello::Name, ::hello::Hello>::Create(channel_.get(), cq, rpcmethod_sayHelloAndSleep_, context, false, nullptr);
}

HelloService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HelloService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< HelloService::Service, ::hello::Name, ::hello::Hello>(
          [](HelloService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::hello::Hello,
             ::hello::Name>* stream) {
               return service->sayHelloAndSleep(ctx, stream);
             }, this)));
}

HelloService::Service::~Service() {
}

::grpc::Status HelloService::Service::sayHelloAndSleep(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hello::Hello, ::hello::Name>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello

